initSidebarItems({"enum":[["Command","Picket Line commands. This is somewhat higher level than [crate::FaktoryCommand]. Essentially, here we are interested with commands from the Picket Line API, as opposed to Faktory API."],["JobFailedError",""]],"mod":[["faktory_command",""],["frame",""],["resp",""]],"struct":[["ClientManager","The `ClientManager` allows us to fully utilize async for workers. Each client is a single `connection` in Faktory parlance. Incidentally, Faktory enterprise is limited on a per connection basis. Thus, if we can limit the number of connections, we can maximize efficiency in terms of Faktory, and wrt I/O bound jobs. The basic idea is that we only use a single client, and the `ClientManager` serves as a non blocking, multi-task enabled interface to that client. Instead of directly accessing a [`FaktoryClient`], tasks instead send commands (messages) to a [`ClientManager`] over a channel, and the `ClientManager` dispatches them to the underlying [`FaktoryClient`]."],["ClientOptions",""],["Failure",""],["FaktoryClient","This is the underlying async client for the Faktory Protocol. It is the lowest level implementation, and higher level libraries should most likely use [`ClientManager`]."],["FaktoryCodec","A simple `Decoder` and `Encoder` implementation that splits up data into lines."],["FaktoryJob","A Faktory job."]],"type":[["ClientManagerReceiver",""],["ClientManagerSender",""]]});